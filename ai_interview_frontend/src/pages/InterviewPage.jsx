// src/pages/InterviewPage.jsx (VERSI DIPERBAIKI)
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getReport, submitAnswer } from '../services/api';
import ProgressIndicator from '../components/common/ProgressIndicator';
import QuestionCard from '../components/interview/QuestionCard';
import Button from '../components/common/Button';

const MAX_QUESTIONS = 5;

const InterviewPage = () => {
Â  const { sessionId } = useParams();
Â  const navigate = useNavigate();
Â  const [questionNumber, setQuestionNumber] = useState(1);
Â  // ðŸ’¡ PERBAIKAN: Tambahkan state untuk ID Pertanyaan saat ini
Â  const [currentQuestionId, setCurrentQuestionId] = useState(null); 
Â  const [currentQuestion, setCurrentQuestion] = useState("Memuat pertanyaan pertama...");
Â  const [answer, setAnswer] = useState('');
Â  const [loading, setLoading] = useState(false);
Â  const [error, setError] = useState(null);

Â  useEffect(() => {
Â  Â  // ðŸ’¡ LOGIKA PERBAIKAN: Ambil ID Pertanyaan pertama dari sessionId saat komponen di-mount
Â  Â  // Format sessionId yang kita buat: sess_{main_question_id}_{Role}_{Level}
Â  Â  const parts = sessionId.split('_');
Â  Â  if (parts.length > 1 && !currentQuestionId) {
Â  Â  Â  Â  // Bagian kedua (indeks 1) adalah main_question_id dari pertanyaan pertama
Â  Â  Â  Â  setCurrentQuestionId(parseInt(parts[1], 10));
Â  Â  }
Â  Â  // ASUMSI: Teks pertanyaan pertama (`currentQuestion`) diisi dari state global/local storage
Â  Â  // atau dikirim sebagai prop saat navigasi dari HomePage.
Â  }, [sessionId]); // Tambahkan currentQuestionId ke dependency array jika diperlukan

Â  const handleSubmit = async () => {
Â  Â  if (!answer.trim()) return alert("Jawaban tidak boleh kosong.");
Â  Â  // ðŸ’¡ PENTING: Pastikan ID pertanyaan tersedia
Â  Â  if (!currentQuestionId) return setError("Kesalahan sesi: ID pertanyaan tidak ditemukan. Coba mulai sesi lagi.");

Â  Â  setLoading(true);
Â  Â  setError(null);

Â  Â  try {
Â  Â  Â  // ðŸ’¡ PERBAIKAN: Kirimkan ID Pertanyaan saat ini ke submitAnswer
Â  Â  Â  const data = await submitAnswer(sessionId, answer, currentQuestionId);

Â  Â  Â  if (questionNumber >= MAX_QUESTIONS) {
Â  Â  Â  Â  // Sesi Selesai, navigasi ke Feedback
Â  Â  Â  Â  navigate(`/feedback/${sessionId}`);
Â  Â  Â  } else {
Â  Â  Â  Â  // ðŸ’¡ LOGIKA PERBAIKAN: Ambil pertanyaan dan ID berikutnya dari response backend
Â  Â  Â  Â  // Backend Anda mengembalikan generated_questions sebagai array. Kita ambil elemen pertama.
Â  Â  Â  Â  const nextQuestionObj = data.generated_questions && data.generated_questions[0];

Â  Â  Â  Â  if (nextQuestionObj) {
Â  Â  Â  Â  Â  Â  // Lanjut ke pertanyaan berikutnya
Â  Â  Â  Â  Â  Â  setQuestionNumber(prev => prev + 1);
Â  Â  Â  Â  Â  Â  setCurrentQuestion(nextQuestionObj.question); // Ambil teks pertanyaan berikutnya
Â  Â  Â  Â  Â  Â  setCurrentQuestionId(nextQuestionObj.id); // **UPDATE ID PERTANYAAN**
Â  Â  Â  Â  Â  Â  setAnswer(''); // Reset input jawaban
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  // Skenario: LLM gagal menghasilkan pertanyaan berikutnya
Â  Â  Â  Â  Â  Â  setError("Gagal mendapatkan pertanyaan lanjutan dari AI.");
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  } catch (err) {
Â  Â  Â  console.error("Error submitting answer:", err);
Â  Â  Â  setError("Gagal mengirim jawaban. Coba lagi.");
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  return (
Â  Â  <div className="min-h-screen bg-gray-100 p-8">
Â  Â  Â  <ProgressIndicator current={questionNumber} total={MAX_QUESTIONS} />
Â  Â  Â  
Â  Â  Â  <div className="max-w-4xl mx-auto mt-8">
Â  Â  Â  Â  <h2 className="text-xl font-semibold text-gray-600 mb-4">Wawancara: Data Analyst</h2>
Â  Â  Â  Â  <QuestionCard 
Â  Â  Â  Â  Â  questionNumber={questionNumber}
Â  Â  Â  Â  Â  questionText={currentQuestion}
Â  Â  Â  Â  />
Â  Â  Â  Â  
Â  Â  Â  Â  <div className="mt-8 bg-white p-6 rounded-lg shadow-md">
Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  value={answer}
Â  Â  Â  Â  Â  Â  onChange={(e) => setAnswer(e.target.value)}
Â  Â  Â  Â  Â  Â  rows="8"
Â  Â  Â  Â  Â  Â  placeholder="Ketik jawaban Anda di sini..."
Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500 text-sm"
Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  {error && <p className="text-red-500 mt-2">{error}</p>}
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  <div className="flex justify-end mt-4">
Â  Â  Â  Â  Â  Â  <Button onClick={handleSubmit} disabled={loading}>
Â  Â  Â  Â  Â  Â  Â  {loading 
Â  Â  Â  Â  Â  Â  Â  Â  ? 'Mengirim & Menganalisis...' 
Â  Â  Â  Â  Â  Â  Â  Â  : (questionNumber === MAX_QUESTIONS ? 'Selesai & Lihat Hasil' : 'Kirim Jawaban & Lanjut')}
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  {/* TipBox akan ditambahkan di sini */}
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default InterviewPage;